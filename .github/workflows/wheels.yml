name: Build wheels

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: Build map_metrics project
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ./lib
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Install required packages from distro
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git build-essential g++ cmake python3-distutils python3-dev python3-numpy python3-pip libboost-graph-dev
          python3 -m pip install pytest
      - name: Configure and build native map_metrics library with Python bindings
        run: |
          mkdir -p build
          cmake -S $PWD -B $PWD/build \
           -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PWD/bin \
           -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$PWD/lib \
           -DCMAKE_BUILD_TYPE=RELEASE \
          && cmake --build build
  build_wheel_linux:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    container: quay.io/pypa/manylinux2010_x86_64
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Install additional utils
        run: yum install -y git openssh-clients wget

      - uses: actions/checkout@v1

      - name: Install fresh CMake into ManyLinux container
        run: |
          env pybin=$(LANG=C ls -d1r /opt/python/cp3*/bin | head -n 1) bash -c '$pybin/python -m pip install cmake && mkdir -p /usr/local/bin && ln -svf $pybin/cmake /usr/local/bin/cmake'
          cmake --version
      - name: Install Boost 1.55.0
        run: |
          wget http://sourceforge.net/projects/boost/files/boost/1.55.0/boost_1_55_0.tar.bz2 --no-check-certificate
          tar -xvjf boost_1_55_0.tar.bz2
          cd boost_1_55_0/
          ./bootstrap.sh --with-icu
          ./b2 --with-graph
          chmod -R +x ./*
          echo "BOOST_ROOT=$(pwd)" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/stage/lib" >> $GITHUB_ENV
      - name: Build Python wheel
        run: |
          chmod -R +x scripts/* \
          && scripts/build-wheels-linux.sh
      - uses: actions/upload-artifact@v1
        with:
          name: artifact
          path: ./wheelhouse

  build_wheel_macOS:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-10.15 ]
    steps:
      - uses: actions/checkout@v2

      - name: Git fetch
        run: git fetch --prune --unshallow --recurse-submodules=no

      - name: Install packages
        run: | 
          brew install coreutils \
          && brew install gcc

      - name: Install boost 
        uses: MarkusJx/install-boost@v2.3.0
        id: install-boost
        with:
          boost_version: 1.72.0
          platform_version: 10.15

      - name: Build wheel
        run: ./scripts/build-wheels-macOS.sh

      - uses: actions/upload-artifact@v2
        with:
          path: ./dist

  build_wheel_windows:
    name: Build wheel on ${{ matrix.os }} ${{ matrix.arch }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2019 ]
        arch: [ x64, x86 ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Git fetch
        run: git fetch --prune --unshallow --recurse-submodules=no

      - name: Install boost
        uses: MarkusJx/install-boost@v2.3.0
        id: install-boost
        with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/actions/boost-versions/blob/main/versions-manifest.json
          boost_version: 1.72.0
          platform_version: 2019

      - name: Setup Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: ${{ matrix.arch }}
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: ${{ matrix.arch }}
      - name: Setup Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: ${{ matrix.arch }}
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: ${{ matrix.arch }}
      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}

      - name: Build wheel
        run: .\scripts\build-wheels-windows.cmd ${{ matrix.arch }}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - uses: actions/upload-artifact@v2
        with:
          path: .\dist

  test_wheel_linux:
    name: Test Python ${{ matrix.python }} wheel on Linux
    runs-on: ubuntu-latest
    needs: build_wheel_linux
    strategy:
      fail-fast: false
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Install map_metrics & numpy
        run: |
          python -m pip install ./artifact/map_metrics-*-manylinux*.whl numpy pytest
      - name: "Python unit tests"
        run: |
          python -m pytest python
  test_wheel_macos:
    name: Test Python ${{ matrix.python }} wheel on macOS
    runs-on: macos-latest
    needs: build_wheel_macos
    strategy:
      fail-fast: false
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Install map_metrics & numpy
        run: |
          python -m pip install ./artifact/map_metrics-*-macosx_10_15_x86_64.whl numpy pytest
      - name: "Python unit tests"
        run: |
          python -m pytest python
  test_wheel_windows64:
    name: Test Python ${{ matrix.python }} wheel on Windows 64bit
    runs-on: windows-latest
    needs: build_wheel_windows
    strategy:
      fail-fast: false
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Install map_metrics & numpy
        run: |
          python -m pip install .\artifact\$(dir artifact -Name | findstr map_metrics-.*-win_amd64.whl) numpy pytest
      - name: "Python unit tests"
        run: |
          python -m pytest python
  test_wheel_windows32:
    name: Test Python ${{ matrix.python }} wheel on Windows 32bit
    runs-on: windows-latest
    needs: build_wheel_windows
    strategy:
      fail-fast: false
      matrix:
        python: ['3.6', '3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: x86

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Install map_metrics & numpy
        run: |
          python -m pip install .\artifact\$(dir artifact -Name | findstr map_metrics-.*-win32.whl) numpy
      - name: "Python unit tests"
        run: |
          $files = Get-ChildItem -Path python_examples -Include *.py
          foreach ($f in $files){
            python $f.FullName || EXIT /B !ERRORLEVEL!
          }

  publish_test_pypi:
    name: Publish wheels to Test PyPI
    needs:
      - test_wheel_linux
      - test_wheel_macos
      - test_wheel_windows64
      - test_wheel_windows32
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Publish to Test-PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: artifact/
  # publish_pypi:
  #   name: Publish wheels to PyPI
  #   needs:
  #     - test_wheel_linux
  #     - test_wheel_macos
  #     - test_wheel_windows64
  #     - test_wheel_windows32
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2

  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}
  #         packages_dir: artifact/

  # publish-github-release:
  #   name: Publish wheels to GitHub Releases
  #   needs:
  #     - test_wheel_linux
  #     - test_wheel_macos
  #     - test_wheel_windows64
  #     - test_wheel_windows32
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2

  #     - uses: softprops/action-gh-release@v1
  #       with:
  #         files: artifact/*.whl
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
